<section class="feature">
    <h3 id="app-bundle">Application(project) bundle</h3>
    <p>RAD organizes and treats application differently compared to 3-rd party
    bundles. File structure of the project application bundle looks like:</p>
    <pre><code>src/
└── KnpRad
    ├── Controller
    │   └── MainController.php
    ├── Tests
    │   └── Controller
    │       └── MainControllerTest.php
    ├── config
    │   ├── routing.yml
    │   │── services.yml
    │   └── services.xml
    ├── i18n
    │   └── messages.ru.xml
    ├── public
    │   └── jquery-1.7.1.min.js
    └── views
        ├── Main
        │   └── index.html.twig
        └── base.html.twig
            </code></pre>
    <p><strong>config</strong> holds all your application configurations, including routing and DIC. And those
    configurations will be autoloaded. Yup, no need to include `routing.yml` in your project
    <strong>config/routing/routing.yml</strong> or to create extension class just to load <strong>services.yml</strong> (or
    services.xml). The only requirement - they should be named <em>routing.yml</em> OR <em>services.(yml|xml)</em>.
    
    <ul>
        <li><strong>config/routing.yml</strong> - defines bundle routes. Will be autoloaded by <em>RadKernel</em> for you.</li>
        <li><strong>config/services.(yml|xml)</strong> - defines bundle services. Will be autoloaded by <em>RadKernel</em> for you.</li>
    </ul>
    
    <p><strong>i18n</strong> holds all your translations</p>
    <p><strong>public</strong> holds all your public *.css, *.js and *.png files. This folder will be copied
    (symlinked) by <strong>assets:install</strong> command.</p>
    <p><strong>views</strong> holds your application views.</p>
    
    <p><strong>P.S.:</strong> If you want to split routing or services in multiple files, just put them into
    <em>config/routing</em> or <em>config/services</em> folder with any name - they will be autoloaded too ;-)</p>
</section>
